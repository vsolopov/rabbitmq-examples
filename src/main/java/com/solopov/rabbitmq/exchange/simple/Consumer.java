package com.solopov.rabbitmq.exchange.simple;

import com.rabbitmq.client.*;
import lombok.extern.slf4j.Slf4j;

import java.io.IOException;
import java.util.concurrent.TimeoutException;

@Slf4j
public class Consumer {

    public static void main(String[] args) throws IOException, TimeoutException {
        consumeMessage();
    }

    private static void consumeMessage() throws IOException, TimeoutException {
        ConnectionFactory factory = new ConnectionFactory();
//        try (Connection connection = factory.newConnection()) {
//            try (Channel channel = connection.createChannel()) {

        Connection connection = factory.newConnection();
        Channel channel = connection.createChannel();

        DeliverCallback deliverCallback = (consumerTag, delivery) -> {
            String callback = new String(delivery.getBody());
            log.info("Message received. Consumer tag:{} callback:{} ", consumerTag, callback);
        };

        String routingKey = "Queue-1";
        boolean autoAck = true; //to ensure the message is received in Consumer
        CancelCallback cancelCallback = consumerTag -> {
            log.info("Cancel callback. consumer tag:{}", consumerTag);
        };
        String consumerTag = channel.basicConsume(routingKey, autoAck, deliverCallback, cancelCallback);
        log.info("Consumer tag generated by server: {}", consumerTag);

//            }//close channel
//        }//close connection
    }
}
